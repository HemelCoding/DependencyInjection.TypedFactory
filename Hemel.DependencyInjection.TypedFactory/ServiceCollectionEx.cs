using Microsoft.Extensions.DependencyInjection;

namespace Hemel.DependencyInjection.TypedFactory;

/// <summary>
/// Exposes an extension method to the <see cref="IServiceCollection"/> to configure a typed factory.
/// </summary>
public static class ServiceCollectionEx
{
    /// <summary>
    /// Declares a typed factory to the service collection.
    /// </summary>
    /// <remarks>
    /// This is equivalent to adding as a singleton the service <typeparamref name="TFactory"/> implemented
    /// by an autogenerated component implementing <typeparamref name="TFactory"/>.
    /// Internally, the implementation uses <see cref="ActivatorUtilities.CreateInstance"/> to resolve dependencies
    /// of the created objects from the <paramref name="services"/> itself.
    /// </remarks>
    /// <typeparam name="TFactory">The interface to be used as a typed factory.</typeparam>
    /// <param name="services">The service collection to declare the typed factory.</param>
    /// <returns><paramref name="services"/> for fluent programmation.</returns>
    public static IServiceCollection AddTypedFactory<TFactory>(this IServiceCollection services)
        where TFactory: notnull
    {
        services.Add(new ServiceDescriptor(
            typeof(TFactory),
            (serviceProvider) => TypedFactoryCreator.Create<TFactory>(services, serviceProvider),
            ServiceLifetime.Singleton));

        return services;
    }
}
